"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os # Import os module
from pathlib import Path
from datetime import timedelta # Keep existing timedelta import
# from storages.backends.s3boto3 import S3Boto3Storage # Can likely remove this too if not used elsewhere directly

# --- Force load .env here --- 
# from dotenv import load_dotenv
# env_path = Path(__file__).resolve().parent.parent / '.env' # Path relative to settings.py
# print(f"DEBUG: Attempting to load .env from: {env_path}")
# loaded = load_dotenv(dotenv_path=env_path)
# print(f"DEBUG: dotenv loaded = {loaded}")
# print(f"DEBUG settings.py: AWS_STORAGE_BUCKET_NAME = {os.environ.get('AWS_STORAGE_BUCKET_NAME')}")
# print(f"DEBUG settings.py: AWS_ACCESS_KEY_ID = {os.environ.get('AWS_ACCESS_KEY_ID')}") 
# print("---------------------------------")
# --- End force load .env --- 

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!)o=ehnlhi2tcmzw+dq_s7kcxxva)3y6wr3wp*s1z##t8rqnuw'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', # Required by allauth

    # Third-party apps
    'rest_framework',
    'corsheaders',
    'background_task',
    'rest_framework_simplejwt',
    'django_rest_passwordreset',
    'storages',
    'allauth', # Core allauth app
    'allauth.account', # Account management
    'allauth.socialaccount', # Social account management
    'allauth.socialaccount.providers.google', # Google provider

    # Local apps
    'api',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware', # Add CORS middleware near the top
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', # Add allauth middleware
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', # REQUIRED by allauth
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Keep MEDIA_ROOT for potential local fallbacks or other uses, but S3 will be default
MEDIA_ROOT = BASE_DIR / 'media' 
# MEDIA_URL will be overridden by S3 settings below

# CORS Settings (Allow all origins for development)
CORS_ALLOW_ALL_ORIGINS = True
# Alternatively, for more specific control:
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000", # Example: Allow your React frontend development server
#     "http://127.0.0.1:3000",
# ]

# Email Configuration (for password reset)
# Use console backend for development (prints emails to terminal)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# Set a default sender address (required even for console backend)
DEFAULT_FROM_EMAIL = 'noreply@jobspeak.local'

# --- Google OAuth Credentials (Read from Env) --- 
# Define these before SOCIALACCOUNT_PROVIDERS uses them
GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET')
# --- End Google OAuth Credentials --- 

# --- AWS S3 Storage Configuration --- 
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')

if AWS_STORAGE_BUCKET_NAME:
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    
    # Use S3 backend (string path is fine)
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage' 
    
    # --- Settings for Public Read Bucket (Option 2) ---
    # Set ACL to None even for public buckets if ACLs are disabled on the bucket
    AWS_DEFAULT_ACL = None # Do not attempt to set ACLs during upload
    AWS_S3_FILE_OVERWRITE = False 
    AWS_QUERYSTRING_AUTH = False # Do NOT generate presigned URLs
    # --- End Public Read Bucket Settings ---
    
else:
    print("WARNING: AWS S3 settings not configured in environment. Falling back to local media storage.")
    MEDIA_URL = '/media/'
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
# --- End AWS S3 Configuration --- 

# --- DEBUG: Check final DEFAULT_FILE_STORAGE value --- 
# print(f"DEBUG: Final DEFAULT_FILE_STORAGE = {locals().get('DEFAULT_FILE_STORAGE', 'Not Set')}") # REMOVE
# --- End DEBUG --- 

# Add JWT authentication settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Add Authentication Backends
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, e.g. login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Site ID required by allauth
SITE_ID = 1

# --- Allauth Settings --- 
ACCOUNT_EMAIL_VERIFICATION = 'optional' # Or 'mandatory' or 'none'
ACCOUNT_AUTHENTICATION_METHOD = 'username_email' # Allow login with username or email
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True # Set based on your user model needs
# Ensure this matches your frontend URLs if using allauth views
# LOGIN_REDIRECT_URL = '/' 
# LOGOUT_REDIRECT_URL = '/login'
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            # Read directly from the settings variables now
            'client_id': GOOGLE_CLIENT_ID,
            'secret': GOOGLE_CLIENT_SECRET,
            'key': '' 
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}
# --- End Allauth Settings --- 
